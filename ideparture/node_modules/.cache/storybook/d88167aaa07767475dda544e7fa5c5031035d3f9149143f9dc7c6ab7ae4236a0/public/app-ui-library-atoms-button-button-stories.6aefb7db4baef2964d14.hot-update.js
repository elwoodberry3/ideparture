"use strict";
self["webpackHotUpdateideparture"]("app-ui-library-atoms-button-button-stories",{

/***/ "./src/app/ui-library/atoms/button/button.stories.ts":
/*!***********************************************************!*\
  !*** ./src/app/ui-library/atoms/button/button.stories.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ButtonIcon: () => (/* binding */ ButtonIcon),
/* harmony export */   Filled: () => (/* binding */ Filled),
/* harmony export */   Large: () => (/* binding */ Large),
/* harmony export */   Outline: () => (/* binding */ Outline),
/* harmony export */   Small: () => (/* binding */ Small),
/* harmony export */   TextIcon: () => (/* binding */ TextIcon),
/* harmony export */   TextOnly: () => (/* binding */ TextOnly),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _button_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button.component */ "./src/app/ui-library/atoms/button/button.component.ts");

const meta = {
  title: 'Atoms/Button',
  component: _button_component__WEBPACK_IMPORTED_MODULE_0__.ButtonComponent,
  tags: ['autodocs'],
  argTypes: {
    styleType: {
      control: {
        type: 'select'
      },
      options: ['text-only', 'text-icon', 'filled', 'outline', 'button-icon'],
      description: 'Defines the button style (text-only, text-icon, filled, outline, or button-icon)'
    },
    text: {
      control: {
        type: 'text'
      },
      description: 'Button text'
    },
    backgroundColor: {
      control: 'color',
      description: 'Optional background color for the button'
    },
    size: {
      control: {
        type: 'select'
      },
      options: ['small', 'medium', 'large'],
      description: 'Button size (small, medium, or large)'
    },
    buttonClick: {
      action: 'clicked'
    }
  },
  args: {
    text: 'Button',
    styleType: 'text-only',
    backgroundColor: 'transparent'
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
// Text-Only Button Story
const TextOnly = {
  args: {
    text: 'Sign Up Here!',
    styleType: 'text-only'
  }
};
// Text + Icon Button Story
const TextIcon = {
  args: {
    text: 'Save',
    styleType: 'text-icon'
  }
};
// Filled Button Story
const Filled = {
  args: {
    text: 'Submit',
    styleType: 'filled',
    backgroundColor: '#1B2E40' // Primary color
  }
};
// Outlined Button Story
const Outline = {
  args: {
    text: 'Cancel',
    styleType: 'outline',
    backgroundColor: 'transparent'
  }
};
// Button + Icon Story
const ButtonIcon = {
  args: {
    text: 'Next',
    styleType: 'button-icon'
  }
};
// Large Button Story
const Large = {
  args: {
    text: 'Large Button',
    size: 'large',
    styleType: 'filled'
  }
};
// Small Button Story
const Small = {
  args: {
    text: 'Small Button',
    size: 'small',
    styleType: 'text-only'
  }
};
;
const __namedExportsOrder = ["TextOnly", "TextIcon", "Filled", "Outline", "ButtonIcon", "Large", "Small"];
TextOnly.parameters = {
  ...TextOnly.parameters,
  docs: {
    ...TextOnly.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    text: 'Sign Up Here!',\n    styleType: 'text-only'\n  }\n}",
      ...TextOnly.parameters?.docs?.source
    }
  }
};
TextIcon.parameters = {
  ...TextIcon.parameters,
  docs: {
    ...TextIcon.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    text: 'Save',\n    styleType: 'text-icon'\n  }\n}",
      ...TextIcon.parameters?.docs?.source
    }
  }
};
Filled.parameters = {
  ...Filled.parameters,
  docs: {
    ...Filled.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    text: 'Submit',\n    styleType: 'filled',\n    backgroundColor: '#1B2E40' // Primary color\n  }\n}",
      ...Filled.parameters?.docs?.source
    }
  }
};
Outline.parameters = {
  ...Outline.parameters,
  docs: {
    ...Outline.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    text: 'Cancel',\n    styleType: 'outline',\n    backgroundColor: 'transparent'\n  }\n}",
      ...Outline.parameters?.docs?.source
    }
  }
};
ButtonIcon.parameters = {
  ...ButtonIcon.parameters,
  docs: {
    ...ButtonIcon.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    text: 'Next',\n    styleType: 'button-icon'\n  }\n}",
      ...ButtonIcon.parameters?.docs?.source
    }
  }
};
Large.parameters = {
  ...Large.parameters,
  docs: {
    ...Large.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    text: 'Large Button',\n    size: 'large',\n    styleType: 'filled'\n  }\n}",
      ...Large.parameters?.docs?.source
    }
  }
};
Small.parameters = {
  ...Small.parameters,
  docs: {
    ...Small.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    text: 'Small Button',\n    size: 'small',\n    styleType: 'text-only'\n  }\n}",
      ...Small.parameters?.docs?.source
    }
  }
};

/***/ })

});
//# sourceMappingURL=app-ui-library-atoms-button-button-stories.6aefb7db4baef2964d14.hot-update.js.map