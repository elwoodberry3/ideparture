{"version":3,"file":"app-ui-library-atoms-button-button-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7CA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpFA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://ideparture/./src/app/ui-library/atoms/button/button.component.ts","webpack://ideparture/./node_modules/css-loader/dist/runtime/api.js","webpack://ideparture/./node_modules/css-loader/dist/runtime/noSourceMaps.js","webpack://ideparture/./src/app/ui-library/atoms/button/button.stories.ts","webpack://ideparture/./src/app/ui-library/atoms/button/button.component.css"],"sourcesContent":["import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./button.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./button.component.css?ngResource\";\n/** BUTTON [COMPONENT] iDeparture Design System v.3.0.1 */\nimport { Component, EventEmitter, Output, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nlet ButtonComponent = class ButtonComponent {\n    buttonClick = new EventEmitter();\n    text = '';\n    icon = false;\n    styleType = 'text-only';\n    backgroundColor = null;\n    size = 'medium';\n    get buttonClasses() {\n        switch (this.styleType) {\n            case 'text-only':\n                return 'w-full text-left text-accent-500 bg-transparent hover:text-accent-300';\n            case 'filled':\n                return 'flex items-center justify-center bg-secondary-600 hover:bg-secondary-500 text-white font-bold py-1 px-6 rounded transition-all';\n            case 'outline':\n                return 'border border-secondary-600 flex items-center justify-center hover:bg-secondary-500 text-secondary-600 font-medium py-1 px-6 rounded transition-all';\n            case 'text-icon':\n                return 'w-full text-left text-accent-600 bg-transparent hover:text-accent-300 inline-flex';\n            case 'button-icon':\n                return 'flex items-center justify-center bg-secondary-600 hover:bg-secondary-500 text-white font-bold py-1 px-6 rounded transition-all';\n            default:\n                return '';\n        }\n    }\n    static propDecorators = {\n        buttonClick: [{ type: Output }],\n        text: [{ type: Input }],\n        icon: [{ type: Input }],\n        styleType: [{ type: Input }],\n        backgroundColor: [{ type: Input }],\n        size: [{ type: Input }]\n    };\n};\nButtonComponent = __decorate([\n    Component({\n        selector: 'app-button',\n        standalone: true,\n        imports: [CommonModule],\n        template: __NG_CLI_RESOURCE__0,\n        styles: [__NG_CLI_RESOURCE__1]\n    })\n], ButtonComponent);\nexport { ButtonComponent };\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (i) {\n  return i[1];\n};","import { ButtonComponent } from './button.component';\nconst meta = {\n    title: 'Atoms/Button',\n    component: ButtonComponent,\n    tags: ['autodocs'],\n    argTypes: {\n        styleType: {\n            control: { type: 'select' },\n            options: ['text-only', 'text-icon', 'filled', 'outline', 'button-icon'],\n            description: 'Defines the button style (text-only, text-icon, filled, outline, or button-icon)',\n        },\n        text: {\n            control: { type: 'text' },\n            description: 'Button text',\n        },\n        backgroundColor: {\n            control: 'color',\n            description: 'Optional background color for the button',\n        },\n        size: {\n            control: { type: 'select' },\n            options: ['small', 'medium', 'large'],\n            description: 'Button size (small, medium, or large)',\n        },\n        buttonClick: { action: 'clicked' },\n    },\n    args: {\n        text: 'Button',\n        styleType: 'text-only',\n        backgroundColor: 'transparent',\n    },\n};\nexport default meta;\n// Text-Only Button Story\nexport const TextOnly = {\n    args: {\n        text: 'Sign Up Here!',\n        styleType: 'text-only',\n    },\n};\n// Text + Icon Button Story\nexport const TextIcon = {\n    args: {\n        text: 'Save',\n        styleType: 'text-icon',\n    },\n};\n// Filled Button Story\nexport const Filled = {\n    args: {\n        text: 'Submit',\n        styleType: 'filled',\n        backgroundColor: '#1B2E40', // Primary color\n    },\n};\n// Outlined Button Story\nexport const Outline = {\n    args: {\n        text: 'Cancel',\n        styleType: 'outline',\n        backgroundColor: 'transparent',\n    },\n};\n// Button + Icon Story\nexport const ButtonIcon = {\n    args: {\n        text: 'Next',\n        styleType: 'button-icon',\n    },\n};\n// Large Button Story\nexport const Large = {\n    args: {\n        text: 'Large Button',\n        size: 'large',\n        styleType: 'filled',\n    },\n};\n// Small Button Story\nexport const Small = {\n    args: {\n        text: 'Small Button',\n        size: 'small',\n        styleType: 'text-only',\n    },\n};\n","// Imports\nvar ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___ = require(\"../../../../../node_modules/css-loader/dist/runtime/noSourceMaps.js\");\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ``, \"\"]);\n// Exports\nmodule.exports = ___CSS_LOADER_EXPORT___.toString();\n"],"names":[],"sourceRoot":""}